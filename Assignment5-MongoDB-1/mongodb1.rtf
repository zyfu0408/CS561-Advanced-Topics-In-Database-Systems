{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \
# Q1
\fs24 \
db.test.insert(\{"_id":1,"name":\{"first":"John","last":"Backus"\},"birth":ISODate("1924-12-03T05:00:00Z"),"death":ISODate("2007-03-17T04:00:00Z"),"contribs":["Fortran","ALGOL","Backus-NaurForm","FP"],"awards":[\{"award":"W.W.McDowellAward","year":1967,"by":"IEEEComputerSociety"\},\{"award":"NationalMedalofScience","year":1975,"by":"NationalScienceFoundation"\},\{"award":"TuringAward","year":1977,"by":"ACM"\},\{"award":"DraperPrize","year":1993,"by":"NationalAcademyofEngineering"\}]\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf0 \CocoaLigature0 db.test.insert( \{     "_id" : ObjectId("51df07b094c6acd67e492f41"),     "name" : \{         "first" : "John",         "last" : "McCarthy"     \},     "birth" : ISODate("1927-09-04T04:00:00Z"),     "death" : ISODate("2011-12-24T05:00:00Z"),     "contribs" : [         "Lisp",         "Artificial Intelligence",         "ALGOL"     ],     "awards" : [         \{             "award" : "Turing Award",             "year" : 1971,             "by" : "ACM"         \},         \{             "award" : "Kyoto Prize",             "year" : 1988,             "by" : "Inamori Foundation"         \},         \{             "award" : "National Medal of Science",             "year" : 1990,             "by" : "National Science Foundation"         \}     ] \})\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
db.test.insert(\{"_id":3,"name":\{"first":"Grace","last":"Hopper"\},"title":"RearAdmiral","birth":ISODate("1906-12-09T05:00:00Z"),"death":ISODate("1992-01-01T05:00:00Z"),"contribs":["UNIVAC","compiler","FLOW-MATIC","COBOL"],"awards":[\{"award":"ComputerSciencesManoftheYear","year":1969,"by":"DataProcessingManagementAssociation"\},\{"award":"DistinguishedFellow","year":1973,"by":"BritishComputerSociety"\},\{"award":"W.W.McDowellAward","year":1976,"by":"IEEEComputerSociety"\},\{"award":"NationalMedalofTechnology","year":1991,"by":"UnitedStates"\}]\})\
\
db.test.insert(\{"_id":4,"name":\{"first":"Kristen","last":"Nygaard"\},"birth":ISODate("1926-08-27T04:00:00Z"),"death":ISODate("2002-08-10T04:00:00Z"),"contribs":["OOP","Simula"],"awards":[\{"award":"RosingPrize","year":1999,"by":"NorwegianDataAssociation"\},\{"award":"TuringAward","year":2001,"by":"ACM"\},\{"award":"IEEEJohnvonNeumannMedal","year":2001,"by":"IEEE"\}]\});\
\
db.test.insert(\{"_id":5,"name":\{"first":"Ole-Johan","last":"Dahl"\},"birth":ISODate("1931-10-12T04:00:00Z"),"death":ISODate("2002-06-29T04:00:00Z"),"contribs":["OOP","Simula"],"awards":[\{"award":"RosingPrize","year":1999,"by":"NorwegianDataAssociation"\},\{"award":"TuringAward","year":2001,"by":"ACM"\},\{"award":"IEEEJohnvonNeumannMedal","year":2001,"by":"IEEE"\}]\});\
\
db.test.insert(\{"_id":6,"name":\{"first":"Guido","last":"vanRossum"\},"birth":ISODate("1956-01-31T05:00:00Z"),"contribs":["Python"],"awards":[\{"award":"AwardfortheAdvancementofFreeSoftware","year":2001,"by":"FreeSoftwareFoundation"\},\{"award":"NLUUGAward","year":2003,"by":"NLUUG"\}]\});\
\
db.test.insert(\{"_id":ObjectId("51e062189c6ae665454e301d"),"name":\{"first":"Dennis","last":"Ritchie"\},"birth":ISODate("1941-09-09T04:00:00Z"),"death":ISODate("2011-10-12T04:00:00Z"),"contribs":["UNIX","C"],"awards":[\{"award":"TuringAward","year":1983,"by":"ACM"\},\{"award":"NationalMedalofTechnology","year":1998,"by":"UnitedStates"\},\{"award":"JapanPrize","year":2011,"by":"TheJapanPrizeFoundation"\}]\});\
\
db.test.insert(\{"_id":8,"name":\{"first":"Yukihiro","aka":"Matz","last":"Matsumoto"\},"birth":ISODate("1965-04-14T04:00:00Z"),"contribs":["Ruby"],"awards":[\{"award":"AwardfortheAdvancementofFreeSoftware","year":"2011","by":"FreeSoftwareFoundation"\}]\});\
\
db.test.insert(\{"_id":9,"name":\{"first":"James","last":"Gosling"\},"birth":ISODate("1955-05-19T04:00:00Z"),"contribs":["Java"],"awards":[\{"award":"TheEconomistInnovationAward","year":2002,"by":"TheEconomist"\},\{"award":"OfficeroftheOrderofCanada","year":2007,"by":"Canada"\}]\});\
\
db.test.insert(\{"_id":10,"name":\{"first":"Martin","last":"Odersky"\},"contribs":["Scala"]\});\
\

\fs28 # Q2
\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \CocoaLigature0 var doc = db.test.find( \{'name.first' : 'John', 'name.last' : 'McCarthy'\} )\CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
doc._id = 2\
\
db.test.insert(doc)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \CocoaLigature0 db.test.remove(\{'name.first':'John','name.last':'McCarthy','_id' : \{ $ne : 2\} \})\CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\fs28 # Q3
\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \CocoaLigature0 db.test.insert(\{ "_id" : 20, "name" : \{  "first" : "Alex",  "last" : "Chen" \},  "birth" : ISODate("1933-08-27T04:00:00Z"), "death" : ISODate("1984-11-07T04:00:00Z"), "contribs" : [  "C++",  "Simula"  ],\uc0\u8232 "awards" : [  \{\u8232 "award" : "WPI Award", "year" : 1977,\u8232 "by" : "WPI"  \} ]  \} )\
\
db.test.insert(\{ "_id" : 30, "name" : \{  "first" : "David",  "last" : "Mark" \},  "birth" : ISODate("1911-04-12T04:00:00Z"), "death" : ISODate("2000-11-07T04:00:00Z"), "contribs" : [  "C++", "FP", "Lisp",  ],\uc0\u8232 "awards" : [  \{\u8232 "award" : "WPI Award", "year" : 1963,\u8232 "by" : "WPI"  \}, \{  \} ]  \} )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs28 \cf0 # Q4
\fs24 \
db.test.find(\{ 'awards.award' : 'Turing Award', 'awards.year' : \{$gt : 1976\} \});\
\

\fs28 # Q5
\fs24 \
db.test.find(\{$or : [\{ "contribs" : "FP"\}, \{awards : \{$exists:true\}, $where: 'this.awards.length < 3'\}]\});\
\

\fs28 # Q6
\fs24 \
db.test.find(\{ 'name.first' : 'Dennis', 'name.last' : 'Ritchie'\}, \{"name" : 1, "contribs" : 1, _id : 0\})\
\

\fs28 # Q7
\fs24 \
db.test.update(\{ 'name.first' : 'Guido', 'name.last' : 'van Rossum'\},\
... \{$push : \{contribs : 'OOP'\}\})\
\

\fs28 # Q8
\fs24 \
db.test.update(\{ 'name.first' : 'Alex', 'name.last' : 'Chen'\}, \{$set: \{'comments':['He taught in 3 universities','died from cancer','lived in CA']\}\}, \{upsert: true\});\
\

\fs28 # Q9  
\fs24 \
db.test.find( \{'name.first': 'Alex', 'name.last': 'Chen'\}).forEach(function(doc) \{ var cons = doc.contribs; cons.forEach(function(item) \{ print('Contribution:' + item + ",\\nPeople:") + db.test.find(\{contribs : item\}).forEach( function(doc) \{ var people = []; var person = \{first: doc.name.first, last: doc.name.last\}; people.push(person); people.forEach(function(person)\{printjson(person)\}); \})\})\})\
\

\fs28 # Q10
\fs24 \
db.test.find( \{'name.first' : \{$regex : /^Jo/\}\}).sort( \{'name.last':1\});\
\

\fs28 # Q11
\fs24 \
db.test.distinct("awards.by")\
\

\fs28 # Q12
\fs24 \
db.test.update( \{death : \{$exists : true\}\}, \{$unset : \{death : ""\}\}, \{multi : true\})\
\

\fs28 # Q13
\fs24 \
db.test.update( \{\}, \{$pull: \{awards : \{$or : [\{year : \{$eq : 2011\}\}, \{year : \{$eq : "2011"\}\} ] \} \}\}, \{multi : true\})\
\

\fs28 # Q14
\fs24 \
db.test.update( \{_id : 30, 'awards.by' : 'WPI'\}, \{$set : \{'awards.$.year': '1965'\}\})\
\

\fs28 # Q15
\fs24 \
db.test.find( \{_id : 3\}, \{'contribs' : 1, _id : 0\}).forEach( function(doc) \{ var cons = doc.contribs; cons.forEach( function(item) \{ db.test.update(\{_id : 30\}, \{$push : \{contribs : item\}\})\}) \})\
\

\fs28 # Q16
\fs24 \
db.test.find( \{awards : \{$exists : true\}, $where : 'this.awards.length >= 2'\}, \{'name' : 1, _id : 0\})\
\

\fs28 # Q17
\fs24 \
db.test.find().sort(\{_id:-1\}).limit(1)\
\

\fs28 # Q18
\fs24 \
db.test.findOne( \{'awards.by' : 'ACM'\})\
\

\fs28 # Q19
\fs24 \
db.test.remove( \{$or : [\{_id : \{$eq : 20\}\}, \{_id : \{$eq : 30\}\}]\})\
\

\fs28 # Q20
\fs24 \
db.test.count()\
\
}